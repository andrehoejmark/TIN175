import os
import tensorflow as tf
import numpy as np
from src.utils.plots import plot_training

###########################################################
#  Function to extract all tensorflow data and
#  a script to extract and plot from our current structure.
###########################################################

#  Path separated for dynamic input Simulation IDs
path_base_dir = "../simulation/ID_"
path_ending_dir = "/keras_logs/"
NO_OF_SIMULATIONS_TO_READ = 52
USE_LOG_SCALE = False


def extract_tf_log(path="", tag=""):
    """
    Extract tensorflow log data from a file post-run
    TODO: add support of list input of tags?
    :param path: Path to events.out log file generated by tensorflow
    :param tag: The tensorboard-tag associated with the data to extract, in this case [epoch_loss, epoch_val_loss]
    :return: A numpy array with the tag-values sorted in ascending epochs
    """
    data = []
    for e in tf.train.summary_iterator(path):
        for v in e.summary.value:
            if v.tag == tag:
                data.append(v.simple_value)
    return np.array(data) if data is not None else None


#  Loop through all the Simulation IDs and plot/save the returned data
for sid in range(NO_OF_SIMULATIONS_TO_READ):
    file_path = path_base_dir + str(sid) + path_ending_dir
    file_name = os.listdir(file_path)[0]  # Not so nice but for our current setup this is fine with single files in dirs
    plot_training(y_label="[Loss, %]",
                          train_loss=extract_tf_log(path=file_path + file_name, tag="epoch_loss"),
                          val_loss=extract_tf_log(path=file_path + file_name, tag="epoch_val_loss"),
                          title="Training metrics for plot %s"%str(sid),
                          sid=str(sid),
                          use_log=USE_LOG_SCALE)
